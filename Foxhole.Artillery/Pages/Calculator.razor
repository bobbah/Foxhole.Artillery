@page "/"
@using System.Numerics
@using Foxhole.Artillery.Data

<PageTitle>Calculator</PageTitle>

<MudGrid>
    <MudItem xs="8">
        <MudText Typo="Typo.h3">Artillery Calculator</MudText>
    </MudItem>
    <MudItem xs="4">
        <MudSelect @bind-Value="TypeOfGun" Label="Gun Preset" Placeholder="None" TransformOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@GunType.WardenHowitzer120">Huber Lariat 120mm</MudSelectItem>
            <MudSelectItem Value="@GunType.WardenHowitzer150">Huber Exalt 150mm</MudSelectItem>
            <MudSelectItem Value="@GunType.WardenGunboat">74b-1 Ronan Gunship</MudSelectItem>
            <MudSelectItem Value="@GunType.Mortar">Cremari Mortar</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" md="6">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">Gun Configuration</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="4">
                            <MudNumericField HideSpinButtons @bind-Value="_minRange" Format="F0" Label="Min Range" Adornment="Adornment.End" AdornmentText="m"/>
                        </MudItem>
                        <MudItem xs="4">
                            <MudNumericField HideSpinButtons @bind-Value="_maxRange" Format="F0" Label="Max Range" Adornment="Adornment.End" AdornmentText="m"/>
                        </MudItem>
                        <MudItem xs="4">
                            <MudNumericField HideSpinButtons @bind-Value="_rangeStep" Format="F2" Label="Increment" Adornment="Adornment.End" AdornmentText="m" Min="1" Max="10"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="6">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center">
                    <MudText Typo="Typo.h5" Inline>Shot History</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" OnClick="() => _observedShots.Clear()">Reset</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="4">
                            <MudNumericField HideSpinButtons @bind-Value="_hitDistance" Format="F0" Label="Distance" Adornment="Adornment.End" AdornmentText="m"/>
                        </MudItem>
                        <MudItem xs="4">
                            <MudNumericField HideSpinButtons @bind-Value="_hitAzimuth" Format="F1" Label="Azimuth" Adornment="Adornment.End" AdornmentText="°"/>
                        </MudItem>
                        <MudItem xs="4" Class="d-flex align-end">
                            <MudButton Variant="Variant.Outlined" OnClick="RecordShot" FullWidth>Record</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center">
                    <MudText Typo="Typo.h5" Inline>Spotter to Target</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" OnClick="AddReference">+ REF</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField HideSpinButtons @bind-Value="_target.Distance" Format="F0" Label="Distance" Adornment="Adornment.End" AdornmentText="m"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField HideSpinButtons @bind-Value="_target.Azimuth" Format="F1" Label="Azimuth" Adornment="Adornment.End" AdornmentText="°"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center">
                    <MudText Typo="Typo.h5" Inline>Offset</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" OnClick="UseHistoryOffset" Disabled="@(_observedShots.Count == 0)">USE HST</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField @bind-Value="_offset.Distance" Format="F0" Label="+/- Distance" Adornment="Adornment.End" AdornmentText="m"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField @bind-Value="_offset.Azimuth" Format="F1" Label="+/- Azimuth" Adornment="Adornment.End" AdornmentText="°"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">Firing Vector</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField Disabled HideSpinButtons @bind-Value="@CalculateAdjustedTarget().Distance" Format="F0" Label="Distance" Adornment="Adornment.End" AdornmentText="m"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField Disabled HideSpinButtons @bind-Value="@CalculateAdjustedTarget().Azimuth" Format="F1" Label="Azimuth" Adornment="Adornment.End" AdornmentText="°"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    @for (var i = 0; i < _referencePoints.Count; i++)
    {
        var cachedIdx = i;
        var cursor = _referencePoints[cachedIdx];
        var name = cachedIdx == _referencePoints.Count - 1 ? "Artillery" : _rpNames[_referencePoints.Count - cachedIdx - 2];
        var lastName = cachedIdx == 0 ? "Spotter" : _rpNames[_referencePoints.Count - cachedIdx - 1];
        <MudItem xs="12">
            <MudPaper Outlined="true" Class="pa-4">
                <MudGrid>
                    <MudItem xs="10">
                        <MudText Typo="Typo.h5">@lastName to @name</MudText>
                    </MudItem>
                    @if (cachedIdx != _referencePoints.Count - 1)
                    {
                        <MudItem xs="2">
                            <MudButton Variant="Variant.Outlined" OnClick="() => RemoveReference(cachedIdx)" FullWidth>Delete</MudButton>
                        </MudItem>
                    }
                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudNumericField HideSpinButtons @bind-Value="cursor.Distance" Format="F0" Label="Distance" Adornment="Adornment.End" AdornmentText="m"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField HideSpinButtons @bind-Value="cursor.Azimuth" Format="F1" Label="Azimuth" Adornment="Adornment.End" AdornmentText="°"/>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
    private FoxholeObservation _target = new FoxholeObservation();
    private List<FoxholeObservation> _referencePoints = new List<FoxholeObservation>() { new FoxholeObservation() };
    private int _minRange;
    private int _maxRange;
    private float _rangeStep = 1;
    private int _hitDistance;
    private float _hitAzimuth;
    private FoxholeObservation _offset = new FoxholeObservation();
    private List<Vector2> _observedShots = new List<Vector2>();

    private GunType _typeOfGun;
    
    private GunType TypeOfGun
    {
        get => _typeOfGun;
        set
        {
            _typeOfGun = value;
            if (_typeOfGun == GunType.Unknown)
                return;
            var foundProfile = FiringCharacteristics.FromType(value);
            _minRange = foundProfile.MinRange;
            _maxRange = foundProfile.MaxRange;
            _rangeStep = foundProfile.RangeStep;
        }
    }

    private List<string> _rpNames = new List<string>()
    {
        "Alpha",
        "Beta",
        "Charlie",
        "Delta",
        "Echo",
        "Foxtrot",
        "Golf",
        "Hotel",
        "India",
        "Juliett",
        "Kilo",
        "Lima",
        "Mike",
        "November",
        "Oscar",
        "Papa",
        "Quebec",
        "Romeo",
        "Sierra",
        "Tango",
        "Uniform",
        "Victor",
        "Whiskey",
        "X-Ray",
        "Yankee",
        "Zulu"
    };

    private void AddReference()
    {
        _referencePoints.Insert(0, new FoxholeObservation());
    }

    private void RecordShot()
    {
        var observed = new FoxholeObservation() { Distance = _hitDistance, Azimuth = _hitAzimuth };
        var targeted = new FoxholeObservation() { Distance = _target.Distance + _offset.Distance, Azimuth = _target.Azimuth + _offset.Azimuth };
        _observedShots.Add(targeted.Vector - observed.Vector);
        _hitDistance = 0;
        _hitAzimuth = 0;
    }

    private void UseHistoryOffset()
    {
        _offset = FoxholeObservation.FromVector(_observedShots.Aggregate(Vector2.Zero, (vec, next) => vec + next) / _observedShots.Count);
    }

    private void RemoveReference(int index) => _referencePoints.RemoveAt(index);

    private FoxholeObservation CalculateBaseTarget() => FoxholeObservation.FromVector(_referencePoints.Aggregate(Vector2.Zero, (vec, observation) => vec += observation.Vector * -1) + (new FoxholeObservation() { Distance = _target.Distance + _offset.Distance, Azimuth = _target.Azimuth + _offset.Azimuth }).Vector);

    private FoxholeObservation CalculateAdjustedTarget()
    {
        var baseTarget = CalculateBaseTarget();

        // Ensure values are actually valid
        if (_minRange > _maxRange)
            return baseTarget;

        // Apply adjustments; namely constrain the distance to the range of the gun
        var baseDistance = Math.Clamp(baseTarget.Distance, _minRange, _maxRange);
        var adjustedDistance = (float)Math.Round((baseDistance - _minRange) / _rangeStep) * _rangeStep + _minRange;
        baseTarget.Distance = adjustedDistance;

        return baseTarget;
    }

}