@page "/"
@using Foxhole.Artillery.Data
@using Foxhole.Artillery.Shared.Calculator
@using System.Text.Json
@using System.Text
@using System.IO.Compression

@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>@_state.SessionName</PageTitle>

<MudGrid>
    <MudItem xs="12" Class="d-flex align-center flex-wrap justify-space-between">
        <MudText Typo="Typo.h3">@_state.SessionName</MudText>
        <div class="d-flex align-center flex-nowrap">
            <MudTooltip Text="Plan settings">
                <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenSettings" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Save/export firing plan">
                <MudIconButton Icon="@Icons.Material.Filled.Download" OnClick="SaveState" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Load firing plan">
                <MudFileUpload T="IBrowserFile" FilesChanged="LoadState" Class="mt-0 mr-2" Accept=".json">
                    <ButtonTemplate>
                        <MudIconButton HtmlTag="label" Icon="@Icons.Material.Filled.Upload" Color="Color.Primary" Variant="Variant.Filled" for="@context"></MudIconButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudTooltip>
            <MudTooltip Text="Copy link to plan">
                <MudIconButton Icon="@Icons.Material.Filled.Link" OnClick="CopyLink" Color="Color.Primary" Variant="Variant.Filled"></MudIconButton>
            </MudTooltip>
        </div>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center justify-space-between">
                    <MudText Typo="Typo.h5" Inline>Target Point</MudText>
                    <MudTooltip Text="Add reference point">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddReference" Size="Size.Small">+ POINT</MudButton>
                    </MudTooltip>

                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField HideSpinButtons @bind-Value="_state.TargetDistance" Format="F0" Label="Distance" Adornment="Adornment.End" AdornmentText="m" Min="0"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField HideSpinButtons @bind-Value="_state.TargetAzimuth" Format="F1" Label="Azimuth" Adornment="Adornment.End" AdornmentText="°" Min="0" Max="360"/>
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect @bind-Value="_state.TargetReference" T="FoxholeObservation" Label="Observed From" AnchorOrigin="Origin.BottomCenter" Dense Disabled="@(_state.ReferencePoints.Count == 0)">
                                <MudSelectItem Value="@FoxholeObservation.Zero">@FoxholeObservation.Zero.Name</MudSelectItem>
                                @foreach (var point in _state.ReferencePoints.OrderBy(x => x.Artillery).ThenBy(x => x.Name))
                                {
                                    <MudSelectItem Value="@point">@point.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center justify-space-between">
                    <MudText Typo="Typo.h5" Inline>Wind</MudText>
                    <MudTooltip Text="Wind usage guide">
                        <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.QuestionMark" OnClick="OpenWindHelp" Size="Size.Small"></MudIconButton>
                    </MudTooltip>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudSelect @bind-Value="_state.Wind.Level" Label="Wind Level" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var windLevel in Enum.GetValues<WindLevel>())
                                {
                                    <MudSelectItem Value="@windLevel">@windLevel</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField HideSpinButtons @bind-Value="_state.Wind.WindAzimuth" Format="F1" Label="Wind Azimuth" Adornment="Adornment.End" AdornmentText="°" Min="0" Max="360"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Outlined="true" Class="pa-4 mud-height-full">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">Firing Vector</MudText>
                </MudItem>
                <MudItem xs="12">
                    @foreach (var observation in CalculateTargets().OrderBy(x => x.OriginName))
                    {
                        <div>
                            <MudTooltip Text="@($"{(observation.IsLimited ? "Calculated vector is out-of-range: " : "Raw vector: ")}{observation.OriginalVector.AsObservation()}")">
                                <MudText Class="d-flex align-center">
                                    @if (observation.IsLimited)
                                    {
                                        <MudBadge Color="Color.Error" Dot Overlap>
                                            <MudChip Size="Size.Small" Color="Color.Secondary" Variant="Variant.Outlined">
                                                @(observation.OriginName):
                                            </MudChip>
                                        </MudBadge>
                                    }
                                    else
                                    {
                                        <MudChip Size="Size.Small" Color="Color.Secondary" Variant="Variant.Outlined">
                                            @(observation.OriginName):
                                        </MudChip>
                                    }
                                    @observation.FinalVector.AsObservation()
                                </MudText>
                            </MudTooltip>
                        </div>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    @foreach (var point in _state.ReferencePoints.OrderBy(x => x.Artillery).ThenBy(x => x.Name))
    {
        <MudItem xs="12" md="6">
            <MudPaper Outlined="true" Class="pa-4">
                <MudGrid>
                    <MudItem xs="12" Class="d-flex align-center justify-space-between">
                        <MudText Typo="Typo.h6">@point.Name @(point.Artillery != GunType.None ? $"({FiringCharacteristics.FromType(point.Artillery).Name})" : string.Empty)</MudText>
                        <div class="d-flex align-center flex-nowrap">
                            @if (point.Artillery == GunType.None)
                            {
                                <MudTooltip Text="Set this point as the current target">
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => SetAsTarget(point)" Size="Size.Small">Set As Target</MudButton>
                                </MudTooltip>
                            }
                            <MudTooltip Text="Delete reference point">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _state.ReferencePoints.Remove(point)" Size="Size.Small" Class="ms-2">Delete</MudButton>
                            </MudTooltip>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "s")]
    public string? CompressedState { get; set; }

    private CalculatorState _state = new()
    {
        ReferencePoints = new List<FoxholeObservation>()
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // Attempt to set state from the URL
        var decompressed = DecompressState();
        if (decompressed != null)
            _state = CalculatorState.FromDTO(decompressed);
    }

    private CalculatorStateDTO? DecompressState()
    {
        var defaultState = new CalculatorStateDTO
        {
            ReferencePoints = new List<FoxholeObservation>()
        };

        if (CompressedState == null || string.IsNullOrWhiteSpace(CompressedState))
            return defaultState;
        
        // Decompress using deflate
        try
        {
            var base64EncodedBytes = Convert.FromBase64String(CompressedState);
            using var compressedStream = new MemoryStream(base64EncodedBytes);
            using var zipStream = new GZipStream(compressedStream, CompressionMode.Decompress);
            using var resultStream = new MemoryStream();
            zipStream.CopyTo(resultStream);

            var decompressedBytes = resultStream.ToArray();
            var json = Encoding.UTF8.GetString(decompressedBytes);
            return JsonSerializer.Deserialize<CalculatorStateDTO>(json, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true, IncludeFields = true });
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to use linked calculator state, try again maybe? ({ex.Message})", Severity.Error);
            return defaultState;
        }
    }

    private string CompressState()
    {
        try
        {
            var bytes = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(CalculatorStateDTO.FromState(_state), new JsonSerializerOptions() { IncludeFields = true }));
            using var compressedStream = new MemoryStream();
            using (var zipStream = new GZipStream(compressedStream, CompressionLevel.SmallestSize))
            {
                zipStream.Write(bytes, 0, bytes.Length);
            }
            var compressedBytes = compressedStream.ToArray();
            return Convert.ToBase64String(compressedBytes);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to generate compressed state ({ex.Message})", Severity.Error);
            return string.Empty;
        }
    }

    private async Task CopyLink()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", NavigationManager.GetUriWithQueryParameter("s", CompressState()));
    }

    private List<FiringVector> CalculateTargets()
    {
        var toReturn = new List<FiringVector>();
        
        // Start with the target vector and start adding the negative of each reference point's vector to build up the chain to each gun
        var targetPosition = new FoxholeObservation("Target", _state.TargetDistance, _state.TargetAzimuth, _state.TargetReference);
        foreach (var position in _state.ReferencePoints.Where(x => x.Artillery != GunType.None))
        {
            var firingVector = new FiringVector() { OriginName = position.Name };
            var fc = FiringCharacteristics.FromType(position.Artillery);
            
            // Get the target position
            var posToTarget = targetPosition.Location - position.Location;

            // Apply wind offset
            posToTarget += _state.Wind.CalculateOffset(fc);
            
            // Note this as the unlimited vector
            firingVector.OriginalVector = new FoxholeObservation("Target Original", 0, 0, posToTarget);
            
            // Now apply the limiting based on firing characteristics
            var distance = Math.Clamp(posToTarget.Length(), fc.MinRange, fc.MaxRange);
            var adjustedDistance = (float)Math.Round((distance - fc.MinRange) / fc.RangeStep) * fc.RangeStep + fc.MinRange;
            if (adjustedDistance > fc.MaxRange)
                adjustedDistance -= fc.RangeStep;
            var dFactor = adjustedDistance / posToTarget.Length();
            firingVector.IsLimited = posToTarget.Length() < fc.MinRange || posToTarget.Length() > fc.MaxRange;
            posToTarget *= dFactor;
            firingVector.FinalVector = new FoxholeObservation("Target", 0, 0, posToTarget);
            
            toReturn.Add(firingVector);
        }

        return toReturn;
    }

    private async Task AddReference()
    {
        var parameters = new DialogParameters<AddPointDialog>() { { "State", _state } };
        var dialog = await DialogService.ShowAsync<AddPointDialog>("Add Reference Point", parameters);
        await dialog.Result;
    }

    private void SetAsTarget(FoxholeObservation observation)
    {
        _state.TargetAzimuth = 0;
        _state.TargetDistance = 0;
        _state.TargetReference = observation;
    }

    private async Task OpenWindHelp()
    {
        var dialog = await DialogService.ShowAsync<WindDialog>("Wind Instructions");
        await dialog.Result;
    }

    private async Task OpenSettings()
    {
        var parameters = new DialogParameters<SettingsDialog>() { { "State", _state } };
        var dialog = await DialogService.ShowAsync<SettingsDialog>("Add Reference Point", parameters);
        await dialog.Result;
    }

    private async Task SaveState()
    {
        var json = JsonSerializer.Serialize(CalculatorStateDTO.FromState(_state), new JsonSerializerOptions() { WriteIndented = true, IncludeFields = true });
        var bytes = Encoding.UTF8.GetBytes(json);
        var fileContent = Convert.ToBase64String(bytes);
        await JsRuntime.InvokeVoidAsync("downloadFile", $"Foxhole.Artillery-{DateTime.UtcNow:yyyy-MM-dd-HH-mm-ss}.json", fileContent);
    }

    private async Task LoadState(IBrowserFile file)
    {
        try
        {
            // Get file from stream and attempt to parse it into the state object
            var stream = file.OpenReadStream();
            var reader = new StreamReader(stream);
            var json = await reader.ReadToEndAsync();
            var dto = JsonSerializer.Deserialize<CalculatorStateDTO>(json, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true, IncludeFields = true });
            _state = CalculatorState.FromDTO(dto!);

            // Notify of state update
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to use uploaded file, try again maybe? ({ex.Message})", Severity.Error);
        }
    }

}